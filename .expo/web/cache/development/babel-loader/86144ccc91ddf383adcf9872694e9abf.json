{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/legren/Projects/my-insta/frontend/components/main/Comments.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport firebase from \"firebase\";\nimport \"firebase/firestore\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { fetchUsersData } from \"../../redux/actions\";\n\nvar CommentsScreen = function CommentsScreen(props) {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      comments = _useState2[0],\n      setComments = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      postId = _useState4[0],\n      setPostId = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      text = _useState6[0],\n      setText = _useState6[1];\n\n  useEffect(function () {\n    console.log(\"PROPS COMMENTS\", props);\n    console.log(\"COMMENTS\", comments);\n\n    function matchUserToComment(comments) {\n      var _loop = function _loop(i) {\n        if (comments[i].hasOwnProperty(\"user\")) {\n          return \"continue\";\n        }\n\n        var user = props.users.find(function (x) {\n          return x.uid === comments[i].creator;\n        });\n\n        if (!user) {\n          props.fetchUsersData(comments[i].creator, false);\n        } else {\n          comments[i].user = user;\n        }\n      };\n\n      for (var i = 0; i < comments.length; i++) {\n        var _ret = _loop(i);\n\n        if (_ret === \"continue\") continue;\n      }\n\n      setComments(comments);\n    }\n\n    if (props.route.params.postId !== postId) {\n      firebase.firestore().collection(\"posts\").doc(props.route.params.uid).collection(\"userPosts\").doc(props.route.params.postId).collection(\"comments\").get().then(function (snapshot) {\n        var comments = snapshot.docs.map(function (el) {\n          var data = el.data();\n          var id = el.id;\n          return _objectSpread(_objectSpread({}, data), {}, {\n            id: id\n          });\n        });\n        matchUserToComment(comments);\n      });\n      setPostId(props.route.params.postId);\n    } else {\n      matchUserToComment(comments);\n    }\n  }, [props.route.params.postId, props.users]);\n\n  var onCommentSend = function onCommentSend() {\n    firebase.firestore().collection(\"posts\").doc(props.route.params.uid).collection(\"userPosts\").doc(postId).collection(\"comments\").add({\n      creator: firebase.auth().currentUser.uid,\n      text: text\n    });\n  };\n\n  return React.createElement(View, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  }, React.createElement(FlatList, {\n    data: comments,\n    horizontal: false,\n    numColumns: 1,\n    extraData: props.users,\n    renderItem: function renderItem(_ref) {\n      var item = _ref.item;\n      return React.createElement(View, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }\n      }, item.user !== undefined ? React.createElement(Text, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 29\n        }\n      }, item.user.name) : null, React.createElement(Text, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 25\n        }\n      }, item.text));\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }\n  }), React.createElement(View, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }\n  }, React.createElement(TextInput, {\n    placeholder: \"Comment...\",\n    onChangeText: function onChangeText(commentText) {\n      return setText(commentText);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 17\n    }\n  }), React.createElement(Button, {\n    title: \"Send\",\n    onPress: function onPress() {\n      return onCommentSend();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 17\n    }\n  })));\n};\n\nvar mapStateToProps = function mapStateToProps(store) {\n  return {\n    users: store.usersState.users\n  };\n};\n\nvar mapDispatchProps = function mapDispatchProps(dispatch) {\n  return bindActionCreators({\n    fetchUsersData: fetchUsersData\n  }, dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchProps)(CommentsScreen);","map":{"version":3,"sources":["/home/legren/Projects/my-insta/frontend/components/main/Comments.js"],"names":["React","useState","useEffect","firebase","connect","bindActionCreators","fetchUsersData","CommentsScreen","props","comments","setComments","postId","setPostId","text","setText","console","log","matchUserToComment","i","hasOwnProperty","user","users","find","x","uid","creator","length","route","params","firestore","collection","doc","get","then","snapshot","docs","map","el","data","id","onCommentSend","add","auth","currentUser","item","undefined","name","commentText","mapStateToProps","store","usersState","mapDispatchProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { View, Text, FlatList, TextInput, Button } from \"react-native\";\n\nimport firebase from \"firebase\";\nimport \"firebase/firestore\";\n\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { fetchUsersData } from \"../../redux/actions\";\n\nconst CommentsScreen = (props) => {\n    const [comments, setComments] = useState([]);\n    const [postId, setPostId] = useState(\"\");\n    const [text, setText] = useState(\"\");\n\n    useEffect(() => {\n        console.log(\"PROPS COMMENTS\", props);\n        console.log(\"COMMENTS\", comments);\n\n        function matchUserToComment(comments) {\n            for (let i = 0; i < comments.length; i++) {\n                if (comments[i].hasOwnProperty(\"user\")) {\n                    continue;\n                }\n\n                const user = props.users.find(\n                    (x) => x.uid === comments[i].creator\n                );\n                if (!user) {\n                    props.fetchUsersData(comments[i].creator, false);\n                } else {\n                    comments[i].user = user;\n                }\n            }\n            setComments(comments);\n        }\n\n        // console.log(\"This is postId\", props.route.params.postId);\n        if (props.route.params.postId !== postId) {\n            firebase\n                .firestore()\n                .collection(\"posts\")\n                .doc(props.route.params.uid)\n                .collection(\"userPosts\")\n                .doc(props.route.params.postId)\n                .collection(\"comments\")\n                .get()\n                .then((snapshot) => {\n                    let comments = snapshot.docs.map((el) => {\n                        const data = el.data();\n                        const id = el.id;\n\n                        return {\n                            ...data,\n                            id,\n                        };\n                    });\n                    matchUserToComment(comments);\n                });\n            setPostId(props.route.params.postId);\n        } else {\n            matchUserToComment(comments);\n        }\n    }, [props.route.params.postId, props.users]);\n\n    const onCommentSend = () => {\n        firebase\n            .firestore()\n            .collection(\"posts\")\n            .doc(props.route.params.uid)\n            .collection(\"userPosts\")\n            .doc(postId)\n            .collection(\"comments\")\n            .add({\n                creator: firebase.auth().currentUser.uid,\n                text,\n            });\n    };\n\n    return (\n        <View>\n            <FlatList\n                data={comments}\n                horizontal={false}\n                numColumns={1}\n                extraData={props.users}\n                renderItem={({ item }) => (\n                    <View>\n                        {item.user !== undefined ? (\n                            <Text>{item.user.name}</Text>\n                        ) : null}\n                        <Text>{item.text}</Text>\n                    </View>\n                )}\n            />\n            <View>\n                <TextInput\n                    placeholder=\"Comment...\"\n                    onChangeText={(commentText) => setText(commentText)}\n                />\n                <Button title=\"Send\" onPress={() => onCommentSend()} />\n            </View>\n        </View>\n    );\n};\n\nconst mapStateToProps = (store) => ({\n    users: store.usersState.users,\n});\n\nconst mapDispatchProps = (dispatch) =>\n    bindActionCreators({ fetchUsersData }, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchProps)(CommentsScreen);\n"]},"metadata":{},"sourceType":"module"}