{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/home/legren/Projects/my-insta/App.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { StatusBar } from \"expo-status-bar\";\nimport React, { Component } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport firebase from \"firebase\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport RootReducer from \"./redux/reducers\";\nimport thunk from \"redux-thunk\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nvar firebaseConfig = {\n  apiKey: \"AIzaSyC8QmEpbQz1pkJ194kxQe5w7ZTlwhnQCS8\",\n  authDomain: \"my-insta-demo.firebaseapp.com\",\n  projectId: \"my-insta-demo\",\n  storageBucket: \"my-insta-demo.appspot.com\",\n  messagingSenderId: \"102968450189\",\n  appId: \"1:102968450189:web:70280212aee64756ed96c4\",\n  measurementId: \"G-WGZ88L0H2L\"\n};\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport LandingScreen from \"./components/auth/Landing\";\nimport RegisterScreen from \"./components/auth/Register\";\nimport LoginScreen from \"./components/auth/Login\";\nimport MainScreen from \"./components/Main\";\nimport AddScreen from \"./components/main/Add\";\nimport SaveScreen from \"./components/main/Save\";\nimport CommentsScreen from \"./components/main/Comments\";\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseConfig);\n}\n\nvar Stack = createStackNavigator();\nvar store = createStore(RootReducer, composeWithDevTools(applyMiddleware(thunk)));\n\nvar App = function (_Component) {\n  _inherits(App, _Component);\n\n  var _super = _createSuper(App);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      loaded: false\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      console.log(\"\", \"AIzaSyC8QmEpbQz1pkJ194kxQe5w7ZTlwhnQCS8\");\n      firebase.auth().onAuthStateChanged(function (user) {\n        if (!user) {\n          _this2.setState({\n            loggedIn: false,\n            loaded: true\n          });\n        } else {\n          _this2.setState({\n            loggedIn: true,\n            loaded: true\n          });\n        }\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          loggedIn = _this$state.loggedIn,\n          loaded = _this$state.loaded;\n\n      if (!loaded) {\n        return React.createElement(View, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 17\n          }\n        }, React.createElement(Text, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 21\n          }\n        }, \"Loading\"));\n      }\n\n      if (!loggedIn) {\n        return React.createElement(NavigationContainer, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 17\n          }\n        }, React.createElement(Stack.Navigator, {\n          initialRouteName: \"Landing\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 21\n          }\n        }, React.createElement(Stack.Screen, {\n          name: \"Landing\",\n          options: {\n            headerShown: false\n          },\n          component: LandingScreen,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 25\n          }\n        }), React.createElement(Stack.Screen, {\n          name: \"Register\",\n          options: {\n            headerShown: true\n          },\n          component: RegisterScreen,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 25\n          }\n        }), React.createElement(Stack.Screen, {\n          name: \"Login\",\n          options: {\n            headerShown: true\n          },\n          component: LoginScreen,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 25\n          }\n        })));\n      }\n\n      return React.createElement(Provider, {\n        store: store,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 13\n        }\n      }, React.createElement(NavigationContainer, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 17\n        }\n      }, React.createElement(Stack.Navigator, {\n        initialRouteName: \"Main\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 21\n        }\n      }, React.createElement(Stack.Screen, {\n        name: \"Main\",\n        component: MainScreen,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 25\n        }\n      }), React.createElement(Stack.Screen, {\n        name: \"Add\",\n        component: AddScreen,\n        navigation: this.props.navigation,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 25\n        }\n      }), React.createElement(Stack.Screen, {\n        name: \"Save\",\n        component: SaveScreen,\n        navigation: this.props.navigation,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 25\n        }\n      }), React.createElement(Stack.Screen, {\n        name: \"Comments\",\n        component: CommentsScreen,\n        navigation: this.props.navigation,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 25\n        }\n      }))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport { App as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#fff\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  }\n});","map":{"version":3,"sources":["/home/legren/Projects/my-insta/App.js"],"names":["StatusBar","React","Component","firebase","Provider","createStore","applyMiddleware","RootReducer","thunk","composeWithDevTools","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","NavigationContainer","createStackNavigator","LandingScreen","RegisterScreen","LoginScreen","MainScreen","AddScreen","SaveScreen","CommentsScreen","apps","length","initializeApp","Stack","store","App","props","state","loaded","console","log","auth","onAuthStateChanged","user","setState","loggedIn","headerShown","navigation","styles","StyleSheet","create","container","flex","backgroundColor","alignItems","justifyContent"],"mappings":"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","sourcesContent":["// Thir party imports\nimport { StatusBar } from \"expo-status-bar\";\nimport React, { Component } from \"react\";\nimport { StyleSheet, Text, View } from \"react-native\";\nimport firebase from \"firebase\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport RootReducer from \"./redux/reducers\";\nimport thunk from \"redux-thunk\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n\nimport { API_KEY_FIREBASE, MEASUREMENT_ID, APP_ID, SENDER_ID } from \"@env\";\n\nconst firebaseConfig = {\n    apiKey: API_KEY_FIREBASE,\n    authDomain: \"my-insta-demo.firebaseapp.com\",\n    projectId: \"my-insta-demo\",\n    storageBucket: \"my-insta-demo.appspot.com\",\n    messagingSenderId: SENDER_ID,\n    appId: APP_ID,\n    measurementId: MEASUREMENT_ID,\n};\n\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\n\n// Screens\nimport LandingScreen from \"./components/auth/Landing\";\nimport RegisterScreen from \"./components/auth/Register\";\nimport LoginScreen from \"./components/auth/Login\";\nimport MainScreen from \"./components/Main\";\nimport AddScreen from \"./components/main/Add\";\nimport SaveScreen from \"./components/main/Save\";\nimport CommentsScreen from \"./components/main/Comments\";\n\nif (firebase.apps.length === 0) {\n    firebase.initializeApp(firebaseConfig);\n}\n\nconst Stack = createStackNavigator();\n\nconst store = createStore(\n    RootReducer,\n    composeWithDevTools(applyMiddleware(thunk))\n);\n\nexport default class App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            loaded: false,\n        };\n    }\n\n    componentDidMount() {\n\n        console.log(\"\", API_KEY_FIREBASE)\n\n        firebase.auth().onAuthStateChanged((user) => {\n            if (!user) {\n                this.setState({\n                    loggedIn: false,\n                    loaded: true,\n                });\n            } else {\n                this.setState({\n                    loggedIn: true,\n                    loaded: true,\n                });\n            }\n        });\n    }\n\n    render() {\n        const { loggedIn, loaded } = this.state;\n        if (!loaded) {\n            return (\n                <View>\n                    <Text>Loading</Text>\n                </View>\n            );\n        }\n        if (!loggedIn) {\n            return (\n                <NavigationContainer>\n                    <Stack.Navigator initialRouteName=\"Landing\">\n                        <Stack.Screen\n                            name=\"Landing\"\n                            options={{ headerShown: false }}\n                            component={LandingScreen}\n                        ></Stack.Screen>\n                        <Stack.Screen\n                            name=\"Register\"\n                            options={{ headerShown: true }}\n                            component={RegisterScreen}\n                        ></Stack.Screen>\n                        <Stack.Screen\n                            name=\"Login\"\n                            options={{ headerShown: true }}\n                            component={LoginScreen}\n                        ></Stack.Screen>\n                    </Stack.Navigator>\n                </NavigationContainer>\n            );\n        }\n\n        return (\n            <Provider store={store}>\n                <NavigationContainer>\n                    <Stack.Navigator initialRouteName=\"Main\">\n                        <Stack.Screen\n                            name=\"Main\"\n                            component={MainScreen}\n                            // options={{ headerShown: false }}\n                        ></Stack.Screen>\n                        <Stack.Screen\n                            name=\"Add\"\n                            component={AddScreen}\n                            navigation={this.props.navigation}\n                        ></Stack.Screen>\n                        <Stack.Screen\n                            name=\"Save\"\n                            component={SaveScreen}\n                            navigation={this.props.navigation}\n                        ></Stack.Screen>\n                        <Stack.Screen\n                            name=\"Comments\"\n                            component={CommentsScreen}\n                            navigation={this.props.navigation}\n                        ></Stack.Screen>\n                    </Stack.Navigator>\n                </NavigationContainer>\n            </Provider>\n        );\n    }\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        backgroundColor: \"#fff\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n    },\n});\n"]},"metadata":{},"sourceType":"module"}