{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport firebase from \"firebase\";\n\nrequire(\"firebase/firestore\");\n\nimport { USER_STATE_CHANGE, USER_POSTS_STATE_CHANGE, USER_FOLLOWING_STATE_CHANGE, USERS_DATA_STATE_CHANGE, USERS_POSTS_STATE_CHANGE, CLEAR_DATA, USERS_LIKES_STATE_CHANGE } from \"../constants\";\nexport function clearData() {\n  return function (dispatch) {\n    dispatch({\n      type: CLEAR_DATA\n    });\n  };\n}\nexport function fetchUser() {\n  return function (dispatch) {\n    firebase.firestore().collection(\"users\").doc(firebase.auth().currentUser.uid).get().then(function (snapshot) {\n      if (snapshot.exists) {\n        dispatch({\n          type: USER_STATE_CHANGE,\n          currentUser: snapshot.data()\n        });\n      } else {\n        console.log(\"does not exist\");\n      }\n    });\n  };\n}\nexport function fetchUserPosts() {\n  return function (dispatch) {\n    firebase.firestore().collection(\"posts\").doc(firebase.auth().currentUser.uid).collection(\"userPosts\").orderBy(\"creation\", \"asc\").get().then(function (snapshot) {\n      var posts = snapshot.docs.map(function (doc) {\n        var data = doc.data();\n        var id = doc.id;\n        return _objectSpread({\n          id: id\n        }, data);\n      });\n      dispatch({\n        type: USER_POSTS_STATE_CHANGE,\n        posts: posts\n      });\n    });\n  };\n}\nexport function fetchUserFollowing() {\n  return function (dispatch) {\n    firebase.firestore().collection(\"following\").doc(firebase.auth().currentUser.uid).collection(\"userFollowing\").onSnapshot(function (snapshot) {\n      var following = snapshot.docs.map(function (doc) {\n        var id = doc.id;\n        return id;\n      });\n      dispatch({\n        type: USER_FOLLOWING_STATE_CHANGE,\n        following: following\n      });\n\n      for (var i = 0; i < following.length; i++) {\n        dispatch(fetchUsersData(following[i], true));\n      }\n    });\n  };\n}\nexport function fetchUsersData(uid, getPosts) {\n  return function (dispatch, getState) {\n    var found = getState().usersState.users.some(function (el) {\n      return el.uid === uid;\n    });\n\n    if (!found) {\n      firebase.firestore().collection(\"users\").doc(uid).get().then(function (snapshot) {\n        if (snapshot.exists) {\n          var user = snapshot.data();\n          user.uid = snapshot.id;\n          dispatch({\n            type: USERS_DATA_STATE_CHANGE,\n            user: user\n          });\n        } else {\n          console.log(\"Snapshot doesnt exist\");\n        }\n      });\n\n      if (getPosts) {\n        dispatch(fetchUsersFollowingPosts(uid));\n      }\n    }\n  };\n}\nexport function fetchUsersFollowingPosts(uid) {\n  return function (dispatch, getState) {\n    firebase.firestore().collection(\"posts\").doc(uid).collection(\"userPosts\").orderBy(\"creation\", \"asc\").get().then(function (snapshot) {\n      var uid = snapshot.docs[0].ref.path.split(\"/\")[1];\n      var user = getState().usersState.users.find(function (el) {\n        return el.uid === uid;\n      });\n      var posts = snapshot.docs.map(function (doc) {\n        var data = doc.data();\n        var id = doc.id;\n        return _objectSpread({\n          id: id,\n          user: user\n        }, data);\n      });\n\n      for (var i = 0; i < posts.length; i++) {\n        dispatch(fetchUsersFollowingLikes(uid, posts[i].id));\n      }\n\n      dispatch({\n        type: USERS_POSTS_STATE_CHANGE,\n        posts: posts,\n        uid: uid\n      });\n    });\n  };\n}\nexport function fetchUsersFollowingLikes(uid, postId) {\n  return function (dispatch) {\n    firebase.firestore().collection(\"posts\").doc(uid).collection(\"userPosts\").doc(postId).collection(\"likes\").doc(firebase.auth().currentUser.uid).onSnapshot(function (snapshot) {\n      var postId = snapshot.ref.path.split('/')[3];\n      var currentUserLike = false;\n      currentUserLike = true;\n      console.log(\"Current User Like\", currentUserLike);\n      dispatch({\n        type: USERS_LIKES_STATE_CHANGE,\n        postId: postId,\n        currentUserLike: currentUserLike\n      });\n    });\n  };\n}","map":{"version":3,"sources":["/home/legren/Projects/my-insta/redux/actions/index.js"],"names":["firebase","require","USER_STATE_CHANGE","USER_POSTS_STATE_CHANGE","USER_FOLLOWING_STATE_CHANGE","USERS_DATA_STATE_CHANGE","USERS_POSTS_STATE_CHANGE","CLEAR_DATA","USERS_LIKES_STATE_CHANGE","clearData","dispatch","type","fetchUser","firestore","collection","doc","auth","currentUser","uid","get","then","snapshot","exists","data","console","log","fetchUserPosts","orderBy","posts","docs","map","id","fetchUserFollowing","onSnapshot","following","i","length","fetchUsersData","getPosts","getState","found","usersState","users","some","el","user","fetchUsersFollowingPosts","ref","path","split","find","fetchUsersFollowingLikes","postId","currentUserLike"],"mappings":"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","sourcesContent":["import firebase from \"firebase\";\nrequire(\"firebase/firestore\");\n\nimport {\n    USER_STATE_CHANGE,\n    USER_POSTS_STATE_CHANGE,\n    USER_FOLLOWING_STATE_CHANGE,\n    USERS_DATA_STATE_CHANGE,\n    USERS_POSTS_STATE_CHANGE,\n    CLEAR_DATA,\n    USERS_LIKES_STATE_CHANGE\n} from \"../constants\";\n\nexport function clearData() {\n    return (dispatch) => {\n        dispatch({\n            type: CLEAR_DATA,\n        });\n    };\n}\n\nexport function fetchUser() {\n    return (dispatch) => {\n        firebase\n            .firestore()\n            .collection(\"users\")\n            .doc(firebase.auth().currentUser.uid)\n            .get()\n            .then((snapshot) => {\n                // console.log(\"This is the snapshot\", snapshot.data())\n                if (snapshot.exists) {\n                    dispatch({\n                        type: USER_STATE_CHANGE,\n                        currentUser: snapshot.data(),\n                    });\n                } else {\n                    console.log(\"does not exist\");\n                }\n            });\n    };\n}\n\nexport function fetchUserPosts() {\n    return (dispatch) => {\n        firebase\n            .firestore()\n            .collection(\"posts\")\n            .doc(firebase.auth().currentUser.uid)\n            .collection(\"userPosts\")\n            .orderBy(\"creation\", \"asc\")\n            .get()\n            .then((snapshot) => {\n                let posts = snapshot.docs.map((doc) => {\n                    const data = doc.data();\n                    const id = doc.id;\n\n                    return {\n                        id,\n                        ...data,\n                    };\n                });\n                // console.log(\"This is the snapshot\", posts);\n                dispatch({\n                    type: USER_POSTS_STATE_CHANGE,\n                    posts,\n                });\n            });\n    };\n}\n\nexport function fetchUserFollowing() {\n    return (dispatch) => {\n        firebase\n            .firestore()\n            .collection(\"following\")\n            .doc(firebase.auth().currentUser.uid)\n            .collection(\"userFollowing\")\n            .onSnapshot((snapshot) => {\n                const following = snapshot.docs.map((doc) => {\n                    const id = doc.id;\n                    return id;\n                });\n                // console.log(\"This is the snapshot following\", following);\n                dispatch({\n                    type: USER_FOLLOWING_STATE_CHANGE,\n                    following,\n                });\n                for (let i = 0; i < following.length; i++) {\n                    dispatch(fetchUsersData(following[i], true));\n                }\n            });\n    };\n}\n\nexport function fetchUsersData(uid, getPosts) {\n    return (dispatch, getState) => {\n        const found = getState().usersState.users.some((el) => el.uid === uid);\n\n        if (!found) {\n            firebase\n                .firestore()\n                .collection(\"users\")\n                .doc(uid)\n                .get()\n                .then((snapshot) => {\n                    if (snapshot.exists) {\n                        let user = snapshot.data();\n                        user.uid = snapshot.id;\n                        // console.log(\"User from action\", user);\n                        dispatch({\n                            type: USERS_DATA_STATE_CHANGE,\n                            user,\n                        });\n                    } else {\n                        console.log(\"Snapshot doesnt exist\");\n                    }\n                });\n            if (getPosts) {\n                dispatch(fetchUsersFollowingPosts(uid));\n            }\n        }\n    };\n}\n\nexport function fetchUsersFollowingPosts(uid) {\n    return (dispatch, getState) => {\n        // console.log(\"UID!!!!\", uid)\n        firebase\n            .firestore()\n            .collection(\"posts\")\n            .doc(uid)\n            .collection(\"userPosts\")\n            .orderBy(\"creation\", \"asc\")\n            .get()\n            .then((snapshot) => {\n                const uid = snapshot.docs[0].ref.path.split(\"/\")[1];\n                // console.log(\n                //     \"This is the snapshot with id from fetchUsersFollowingPosts\",\n                //     { query: snapshot.docs[0].ref.path.split(\"/\")[1] }\n                // );\n                const user = getState().usersState.users.find(\n                    (el) => el.uid === uid\n                );\n\n                let posts = snapshot.docs.map((doc) => {\n                    const data = doc.data();\n                    const id = doc.id;\n\n                    return {\n                        id,\n                        user,\n                        ...data,\n                    };\n                });\n\n                for (let i = 0; i < posts.length; i++) {\n                    // console.log(\"Before dispatching likes\", posts[i])\n                    dispatch(fetchUsersFollowingLikes(uid, posts[i].id))\n                }\n\n                dispatch({\n                    type: USERS_POSTS_STATE_CHANGE,\n                    posts,\n                    uid,\n                });\n                // console.log(\"Posts from users\", posts);\n            });\n    };\n}\n\nexport function fetchUsersFollowingLikes(uid,postId) {\n    return (dispatch) => {\n        // console.log(\"PostID!!!!\", postId)\n        firebase\n            .firestore()\n            .collection(\"posts\")\n            .doc(uid)\n            .collection(\"userPosts\")\n            .doc(postId)\n            .collection(\"likes\")\n            .doc(firebase.auth().currentUser.uid)\n            .onSnapshot((snapshot) => {\n                const postId = snapshot.ref.path.split('/')[3]\n                // console.log(\"SNAPSHOT\", postId);\n                let currentUserLike = false;\n\n                // if (snapshot.exists) {\n                    currentUserLike = true\n                    console.log(\"Current User Like\", currentUserLike)\n                    dispatch({\n                        type: USERS_LIKES_STATE_CHANGE,\n                        postId,\n                        currentUserLike\n                    })\n                // }\n\n            });\n    };\n}\n"]},"metadata":{},"sourceType":"module"}