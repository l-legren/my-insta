{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/legren/Projects/my-insta/frontend/components/main/Save.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport firebase from \"firebase\";\n\nrequire(\"firebase/firestore\");\n\nrequire(\"firebase/firebase-storage\");\n\nexport default function SaveScreen(props) {\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      caption = _useState2[0],\n      setCaption = _useState2[1];\n\n  var uploadImage = function uploadImage() {\n    var uri, childPath, respond, blob, task, taskProgress, taskError, taskCompleted;\n    return _regeneratorRuntime.async(function uploadImage$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            uri = props.route.params.image;\n            childPath = \"post/\" + firebase.auth().currentUser.uid + \"/\" + Math.random().toString(36);\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(fetch(uri));\n\n          case 4:\n            respond = _context.sent;\n            _context.next = 7;\n            return _regeneratorRuntime.awrap(respond.blob());\n\n          case 7:\n            blob = _context.sent;\n            task = firebase.storage().ref().child(childPath).put(blob);\n\n            taskProgress = function taskProgress(snapshot) {\n              console.log(\"transferred: \" + snapshot.bytesTransferred);\n            };\n\n            taskError = function taskError(error) {\n              console.log(error);\n            };\n\n            taskCompleted = function taskCompleted() {\n              task.snapshot.ref.getDownloadURL().then(function (snapshot) {\n                savePostData(snapshot);\n                console.log(\"Completed\", snapshot);\n              });\n            };\n\n            task.on(\"state_changed\", taskProgress, taskError, taskCompleted);\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var savePostData = function savePostData(downloadURL) {\n    firebase.firestore().collection(\"posts\").doc(firebase.auth().currentUser.uid).collection(\"userPosts\").add({\n      downloadURL: downloadURL,\n      caption: caption,\n      creation: firebase.firestore.FieldValue.serverTimestamp()\n    }).then(function () {\n      props.navigation.popToTop();\n    });\n  };\n\n  return React.createElement(View, {\n    style: {\n      flex: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, React.createElement(Image, {\n    source: {\n      uri: props.route.params.image\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }\n  }), React.createElement(TextInput, {\n    placeholder: \"Write a Caption...\",\n    onChangeText: function onChangeText(caption) {\n      return setCaption(caption);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }), React.createElement(Button, {\n    title: \"Save\",\n    onPress: function onPress() {\n      return uploadImage();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }\n  }));\n}","map":{"version":3,"sources":["/home/legren/Projects/my-insta/frontend/components/main/Save.js"],"names":["React","useState","firebase","require","SaveScreen","props","caption","setCaption","uploadImage","uri","route","params","image","childPath","auth","currentUser","uid","Math","random","toString","fetch","respond","blob","task","storage","ref","child","put","taskProgress","snapshot","console","log","bytesTransferred","taskError","error","taskCompleted","getDownloadURL","then","savePostData","on","downloadURL","firestore","collection","doc","add","creation","FieldValue","serverTimestamp","navigation","popToTop","flex"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { View, Text, Image, TextInput, Button } from \"react-native\";\n\nimport firebase from \"firebase\";\nrequire(\"firebase/firestore\");\nrequire(\"firebase/firebase-storage\");\n\nexport default function SaveScreen(props) {\n    const [caption, setCaption] = useState(\"\");\n\n    const uploadImage = async () => {\n        const uri = props.route.params.image;\n        const childPath = `post/${\n            firebase.auth().currentUser.uid\n        }/${Math.random().toString(36)}`;\n\n        const respond = await fetch(uri);\n        const blob = await respond.blob();\n\n        const task = firebase.storage().ref().child(childPath).put(blob);\n\n        const taskProgress = (snapshot) => {\n            console.log(`transferred: ${snapshot.bytesTransferred}`);\n        };\n\n        const taskError = (error) => {\n            console.log(error);\n        };\n\n        const taskCompleted = () => {\n            task.snapshot.ref.getDownloadURL().then((snapshot) => {\n                savePostData(snapshot);\n                console.log(\"Completed\", snapshot);\n            });\n        };\n\n        task.on(\"state_changed\", taskProgress, taskError, taskCompleted);\n    };\n\n    const savePostData = (downloadURL) => {\n        firebase\n            .firestore()\n            .collection(\"posts\")\n            .doc(firebase.auth().currentUser.uid)\n            .collection(\"userPosts\")\n            .add({\n                downloadURL,\n                caption,\n                creation: firebase.firestore.FieldValue.serverTimestamp()\n            })\n            .then(function () {\n                props.navigation.popToTop();\n            });\n    };\n\n    return (\n        <View style={{ flex: 1 }}>\n            <Image source={{ uri: props.route.params.image }} />\n            <TextInput\n                placeholder=\"Write a Caption...\"\n                onChangeText={(caption) => setCaption(caption)}\n            />\n            <Button title=\"Save\" onPress={() => uploadImage()} />\n        </View>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}